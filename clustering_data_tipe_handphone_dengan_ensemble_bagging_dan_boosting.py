# -*- coding: utf-8 -*-
"""Clustering Data Tipe Handphone dengan Ensemble Bagging dan Boosting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySmok_NhxH9-DofmE4FJHHxAHnxp4u7G
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import BaggingClassifier, AdaBoostClassifier

df = pd.read_csv('dataclean.csv')
df

df['price_ratio'] = df['normalized_new_price'] - df['normalized_used_price']

df['normalized_used_price'] = df['normalized_used_price'].apply(lambda x: round(x, 1))
df['normalized_new_price'] = df['normalized_new_price'].apply(lambda x: round(x, 1))
df['price_ratio'] = df['price_ratio'].apply(lambda x: round(x, 1))

df

brand_avg_ratio = df.groupby('device_brand')['price_ratio'].mean()

top_10_data = df.nlargest(10, 'price_ratio')

selected_columns = ['device_brand', 'normalized_new_price', 'normalized_used_price', 'price_ratio']

display(top_10_data[selected_columns])

top_brands = brand_avg_ratio.sort_values(ascending=False).head(10)
top_brands

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
top_brands.plot(kind='bar', color='skyblue')
plt.title('Top 10 Brands Based on Price Ratio')
plt.xlabel('Brand')
plt.ylabel('Average Price Ratio')
plt.show()

df.to_csv("top_10_phone&tablet_price_ratio.csv", index=False)

df_data = df.iloc[: , 13:16]
df_target = df.iloc[: , 0]
df_data,df_target

#membagi dataset menjadi data training dan data testing
atr_train, atr_test, kelas_train, kelas_test = train_test_split(df_data, df_target, test_size=0.2, random_state=0)

atr_train.shape, atr_test.shape

kelas_train.shape,kelas_test.shape

from sklearn.model_selection import cross_val_score
from sklearn.ensemble import AdaBoostClassifier

#menjalankan metode ensemble bagging
modelknn = KNeighborsClassifier(n_neighbors=5)
modelensemble=BaggingClassifier(base_estimator=modelknn, n_estimators=15, max_samples=0.7)

#melakukan pengujian dengan cross validation
akurasi = cross_val_score(modelensemble, df_data, df_target, cv=10)

#melihat rata-rata akurasi metode ensemble bagging
print(akurasi.mean())

from sklearn.ensemble import AdaBoostClassifier

#menjalankan  metode ensemble boosting
from sklearn.naive_bayes import GaussianNB
modelNB = GaussianNB()
modelensemble2 = AdaBoostClassifier(base_estimator=modelNB, n_estimators=30)

from sklearn.model_selection import cross_val_score

#melakukan pengujian dengan cross validation
akurasi2 = cross_val_score(modelensemble2, df_data, df_target, cv=10)

#melihat rata-rata akurasi dari metode ensemble boosting
print(akurasi2.mean())

from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import VotingClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Membuat dataset contoh
X, y = make_classification(n_samples=1000, n_features=20, random_state=42)

# Membagi dataset menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Membuat model Decision Tree
model_dt = DecisionTreeClassifier(random_state=42)

# Membuat model Logistic Regression
model_lr = LogisticRegression(random_state=42)

# Membuat ensemble model menggunakan VotingClassifier
ensemble_model = VotingClassifier(estimators=[
    ('decision_tree', model_dt),
    ('logistic_regression', model_lr)
], voting='hard')  # 'hard' untuk majority voting

# Melatih ensemble model pada data latih
ensemble_model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = ensemble_model.predict(X_test)

# Evaluasi performa ensemble model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')



